package _72_trailingZeroes

// 0 由 2*5 产生, 2作为因数出现的次数远大于5
// 所以我们需要找到 n! 中所有作为因素的5

// 计算的是 n!的0, 实际上就是计算 n! 中有几个5参与运算

// 1 2 3 2*2 5 2*3 7 2*2*2*2 3*3 2*5
// 比如 10! 中 5(1*5)和10(2*5), 有两个数字参与运算

// 问题转化为 1-10中 有几个数是5的倍数, 而5的倍数需要满足 5或10结尾
// 所以我们可以通过 n/5 来获得所有5的倍数

// 但是仅仅如此还不够, 遇到25的情况下, 25/5=5 , 剩下的数字中还存在5的倍数
// 当我们遇到5*5, 5*5*5 的时候, 所以还需要判断25的倍数, 125的倍数...

func trailingZeroes(n int) int {
	cnt := 0
	for n >= 5 {
		cnt += n / 5
		n = n / 5
	}
	return cnt
}
