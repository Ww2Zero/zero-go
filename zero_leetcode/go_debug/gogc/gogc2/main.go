package main

func allocate() {
	_ = make([]byte, 1<<20)
}

//go build -o main
//GODEBUG=gctrace=1 ./main
func main() {
	for n := 1; n < 100000; n++ {
		allocate()
	}
}

// Output:
//gc 7188 @1.104s 18%: 0.014+0.058+0.001 ms clock, 0.14+0.023/0.022/0.013+0.019 ms cpu, 4->5->1 MB, 5 MB goal, 10 P
//gc 7189 @1.104s 18%: 0.015+0.063+0.001 ms clock, 0.15+0.022/0.033/0.004+0.013 ms cpu, 4->5->1 MB, 5 MB goal, 10 P
//gc 7190 @1.104s 18%: 0.020+0.048+0.006 ms clock, 0.20+0.013/0.029/0.010+0.060 ms cpu, 4->6->2 MB, 5 MB goal, 10 P
//gc 7191 @1.104s 18%: 0.013+0.047+0.008 ms clock, 0.13+0.021/0.017/0.017+0.089 ms cpu, 4->5->1 MB, 5 MB goal, 10 P
//gc 7192 @1.104s 18%: 0.016+0.055+0 ms clock, 0.16+0.022/0.046/0.002+0.007 ms cpu, 4->5->1 MB, 5 MB goal, 10 P

// gc 2 @0.001s 2%: 0.018+1.1+0.029 ms clock, 0.22+0.047/0.074/0.048+0.34 ms cpu, 4->7->3 MB, 5 MB goal, 12 P

//字段	含义
//gc 2	第二个 GC 周期
//0.001	程序开始后的 0.001 秒
//2%	该 GC 周期中 CPU 的使用率
//0.018	标记开始时， STW 所花费的时间（wall clock）
//1.1	标记过程中，并发标记所花费的时间（wall clock）
//0.029	标记终止时， STW 所花费的时间（wall clock）
//0.22	标记开始时， STW 所花费的时间（cpu time）
//0.047	标记过程中，标记辅助所花费的时间（cpu time）
//0.074	标记过程中，并发标记所花费的时间（cpu time）
//0.048	标记过程中，GC 空闲的时间（cpu time）
//0.34	标记终止时， STW 所花费的时间（cpu time）
//4	标记开始时，堆的大小的实际值
//7	标记结束时，堆的大小的实际值
//3	标记结束时，标记为存活的对象大小
//5	标记结束时，堆的大小的预测值
//12	P 的数量

// scvg: 8 KB released
//scvg: inuse: 3, idle: 60, sys: 63, released: 57, consumed: 6 (MB)

//字段	含义
//8 KB released	向操作系统归还了 8 KB 内存
//3	已经分配给用户代码、正在使用的总内存大小 (MB)
//60	空闲以及等待归还给操作系统的总内存大小（MB）
//63	通知操作系统中保留的内存大小（MB）
//57	已经归还给操作系统的（或者说还未正式申请）的内存大小（MB）
//6	已经从操作系统中申请的内存大小（MB）
